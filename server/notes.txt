============================= OPTIMIZATIONS ============================================
1. Use mailbox to check if a piece is present in move generation
2. Restructure the if statements in the move generation and MakeMove funcitons. 
3. Make a map for getting the index of mailbox from the uint64 (A square on the board)

=================================== CHESS MOVEMENT ======================================
1. Allow choice for pawn promotion (optional)

======================================= AI ============================================
1. Make a undo move function
2. Make a random AI first and connect it to the frontent

======================================= NOTES ===========================================
FOR UNDO MOVE FUNCTION:

Approach:
  My current idea is to store the previous rules (in castling rules and en passant rules) in the bitboard state.
  Then, when the undo move function is called, I will revert the castling rules and en passant rules to the previous state.
  For the mailbox and the bitboard, I will revert the changes made by the move.
  The problem that I foresee is that in the recursive calls, the castling rules and en passant rules will be overwritten.

  Yeah it seems it will cause a problem which means I am going to have to recreate the board rules with only the infomation from the move that is being undone.
